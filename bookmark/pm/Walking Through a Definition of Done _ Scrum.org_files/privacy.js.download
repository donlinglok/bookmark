(function () {
    'use strict';

    const scrumOrgPrivacyTimestampKey = "scrumorg.privacy.timestamp";
    const scrumOrgPrivacyLastUpdateKey = "scrumorg.privacy.localUpdate";
    const scrumOrgPrivacyAcceptedKey = "scrumorg.privacy.accepted";

    var getPrivacyTimestamp = function() {

        let privacyTimestamp = getClientValue(scrumOrgPrivacyTimestampKey);
        let privacyLastUpdate = getClientValue(scrumOrgPrivacyLastUpdateKey);

        // Only check for an updated privacy policy at most every 2 hours
        if ((privacyLastUpdate === null || privacyLastUpdate === '' || (parseInt(privacyLastUpdate) + (60 * 60 * 2)) < (Date.now() / 1000))) {
            return fetch("/privacy/timestamp")
                .then(function(response) {
                    if (response.status === 200) {
                        return response.json();
                    }
                })
                .then(function(data) {
                    if (!data) {
                        return;
                    }
                    privacyTimestamp = data.timestamp;
                    storeClientValue(scrumOrgPrivacyTimestampKey, data.timestamp);
                    storeClientValue(scrumOrgPrivacyLastUpdateKey, Date.now() / 1000);

                    return { "timestamp": privacyTimestamp };
                });
        }
        else {
            return Promise.resolve({"timestamp": privacyTimestamp});
        }
    };

    var ensurePrivacyAccepted = function(data) {
        if (!data) {
            return;
        }

        let privacyAcceptedTimestamp = getClientValue(scrumOrgPrivacyAcceptedKey);

        if (!privacyAcceptedTimestamp || privacyAcceptedTimestamp < data.timestamp) {
            let privacyElement = document.querySelector('.privacy-toast');

            privacyElement.setAttribute('style', 'display: block;');

            privacyElement.querySelector('.privacy-dismiss').onclick = function() {
                privacyElement.setAttribute('style', 'display: none;');
                storeClientValue(scrumOrgPrivacyAcceptedKey, Date.now() / 1000);
            };
        }
    };

    function storeClientValue(key, value) {
        //use local storage if available
        if (typeof(Storage) !== "undefined") {
            localStorage.setItem(key, value);
        }
    }

    function getClientValue(key) {
        //use local storage if available
        if (typeof(Storage) !== "undefined") {
            return localStorage.getItem(key);
        }
        return '';
    }

    getPrivacyTimestamp()
        .then(ensurePrivacyAccepted);

}());
