<!DOCTYPE html>
<!-- saved from url=(0180)https://donlinglok.github.io/bookmark/ci/%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%9B%A2%E9%98%9F%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5%E7%BB%8F%E9%AA%8C.htm -->
<html lang="en" class="cye-disabled cye-nm gr__showme_codes gr__donlinglok_github_io"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>一些小团队的自动化运维实践经验</title>

  <!-- CSS -->
  <link rel="stylesheet" href="./一些小团队的自动化运维实践经验_files/main.css" type="text/css">
  <link rel="stylesheet" href="./一些小团队的自动化运维实践经验_files/social-share-kit.css" type="text/css">

  <!-- Font -->
<!--   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css"> -->


  <link rel="alternate" type="application/rss+xml" title="RSS Feed for 翟志军" href="http://showme.codes/feed.xml">
  <!-- Begin Jekyll SEO tag v2.5.0 -->
<title>一些小团队的自动化运维实践经验 | 翟志军</title>
<meta name="generator" content="Jekyll v3.7.4">
<meta property="og:title" content="一些小团队的自动化运维实践经验">
<meta name="author" content="翟志军">
<meta property="og:locale" content="en_US">
<link rel="canonical" href="https://showme.codes/2018-06-07/devops-in-action/">
<meta property="og:url" content="https://showme.codes/2018-06-07/devops-in-action/">
<meta property="og:site_name" content="翟志军">
<meta property="og:type" content="article">
<meta property="article:published_time" content="2018-06-07T00:00:00+00:00">
<script src="./一些小团队的自动化运维实践经验_files/hm.js"></script><script async="" src="./一些小团队的自动化运维实践经验_files/analytics.js"></script><script src="./一些小团队的自动化运维实践经验_files/hm(1).js"></script><style id="nightModeStyle">
html.cye-enabled.cye-nm:not(*:-webkit-full-screen) body,
 html.cye-enabled.cye-nm:not(*:-webkit-full-screen) #cye-workaround-body {-webkit-filter:contrast(91%) brightness(84%) invert(1);}</style><style id="cyebody">html.cye-enabled.cye-lm body{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyediv">html.cye-enabled.cye-lm div{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyetable">html.cye-enabled.cye-lm th{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}html.cye-enabled.cye-lm td{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyetextInput">html.cye-enabled.cye-lm input[type=text]{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}html.cye-enabled.cye-lm textarea{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeselect">html.cye-enabled.cye-lm select{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeul">html.cye-enabled.cye-lm ul{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeChangeByClick">html.cye-enabled.cye-lm .cye-lm-tag,html.cye-enabled.cye-lm.cye-lm-tag{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><script async="" src="./一些小团队的自动化运维实践经验_files/analytics(1).js"></script><script type="application/ld+json">
{"@type":"BlogPosting","url":"https://showme.codes/2018-06-07/devops-in-action/","headline":"一些小团队的自动化运维实践经验","dateModified":"2018-06-07T00:00:00+00:00","datePublished":"2018-06-07T00:00:00+00:00","author":{"@type":"Person","name":"翟志军"},"mainEntityOfPage":{"@type":"WebPage","@id":"https://showme.codes/2018-06-07/devops-in-action/"},"@context":"http://schema.org"}</script>
<!-- End Jekyll SEO tag -->



  <!-- Google Analytics -->

<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', '', 'auto');
ga('send', 'pageview');

</script><style id="nightModeStyle">
html.cye-enabled.cye-nm:not(*:-webkit-full-screen) body,
 html.cye-enabled.cye-nm:not(*:-webkit-full-screen) #cye-workaround-body {-webkit-filter:contrast(91%) brightness(84%) invert(1);}</style><style id="cyebody">html.cye-enabled.cye-lm body{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyediv">html.cye-enabled.cye-lm div{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyetable">html.cye-enabled.cye-lm th{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}html.cye-enabled.cye-lm td{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyetextInput">html.cye-enabled.cye-lm input[type=text]{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}html.cye-enabled.cye-lm textarea{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeselect">html.cye-enabled.cye-lm select{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeul">html.cye-enabled.cye-lm ul{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style><style id="cyeChangeByClick">html.cye-enabled.cye-lm .cye-lm-tag,html.cye-enabled.cye-lm.cye-lm-tag{background-color:#c9e5cc !important;border-color:rgb(50, 57, 51) !important;color:#000000  !important}</style>



<script src="./一些小团队的自动化运维实践经验_files/embed.js" data-timestamp="1553076900349"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.9974049bf7b0591e5d4f055cb67f3ee3.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.880980e048a2432334f13013030456ac.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.7ca5005d1897180d07d928e89d2628be.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.9974049bf7b0591e5d4f055cb67f3ee3.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.880980e048a2432334f13013030456ac.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.7ca5005d1897180d07d928e89d2628be.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><script src="./一些小团队的自动化运维实践经验_files/embed(1).js" data-timestamp="1553852709832"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.9974049bf7b0591e5d4f055cb67f3ee3.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.880980e048a2432334f13013030456ac.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.4180262f1aa52e0f0340aac9fc52a8d8.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"></head><div id="cyeBlackMaskLayer" style="background-color: rgb(19, 19, 19); position: fixed; width: 1980px; height: 1080px; z-index: -2147483648;"></div><body data-gr-c-s-loaded="true" style=""><div id="cyeBlackMaskLayer" style="background-color: rgb(19, 19, 19); position: fixed; width: 1980px; height: 1080px; z-index: -2147483648;"></div>


  <div class="content-container">
    <header>
  <h1 class="header-small">
    <a href="http://showme.codes/">翟志军</a>
  </h1>
</header>
<div class="post">
  <h1 class="post-title">一些小团队的自动化运维实践经验</h1>
  <span class="post-date">
    <time>07 Jun 2018</time>
  </span>
  <div class="post-tag">
    <ul>
      
      <li>
        <a href="https://showme.codes/tags#%E8%BF%90%E7%BB%B4" class="tag">
          <span class="term">运维</span>
        </a>
      </li>
      
      
    </ul>
  </div>

  <p><strong>注：本文要求读者对Ansible和 Jenkins有一定的认识。</strong></p>

<p>题记: 幸福的家庭都是相似的 不幸的家庭各有各的不幸</p>

<p>行业内各巨头的自动化运维架构都各种功能各种酷炫，如<a href="http://www.learnfuture.com/article/1749">下图</a>，让人可望不可及。现在最终的样子大家都知道了，但问题是如何根据自己团队当前的情况一步步向那个目标演进？</p>

<p><img src="./一些小团队的自动化运维实践经验_files/292372-4a6707c7415fc889.png" alt="image"></p>

<p>笔者所在团队，三个半开发，要维护几十台云机器，部署了十来个应用，这些应用90%都是遗留系统。应用系统的编译打包基本在程序员自己的电脑上。分支管理也清一色的 dev 分支开发，测试通过后，再合并到 master 分支。生产环境的应用配置要登录上具体的机器看才知道，更不用说配置中心及配置版本化了。</p>

<p>对了，连基本的机器级别的基础监控都没有。</p>

<p>我平时的工作是 50% 业务开发，50% 运维。面对这么多问题，我就想啊，如何在低成本情况下实现自动化运维。本文就是总结我在这方面一些经验和实践。希望对读者有帮助。</p>

<h4 id="别说话先上监控和告警">别说话，先上监控和告警</h4>
<p>事情有轻重缓急，监控和告警是我觉得一开始就要做的，即使业务开发被拖慢。只有知道了当前的情况，你才好做下一步计划。</p>

<p>现在市面上监控系统很多：Zabbix、Open-Falcon、Prometheus。最终作者选择了 Prometheus。因为：</p>

<ol>
  <li>它是拉模式的</li>
  <li>它方便使用文本方式来配置，有利于配置版本化</li>
  <li>插件太多了，想要监控什么，基本都会有现成的</li>
  <li>以上三者，我基本都要重新学，我为什么不学一个 Google SRE 书上推荐的呢？</li>
</ol>

<p>之前我们已经介绍过，人少机器多，所以，安装 Prometheus 的过程也必须要自动化，同时版本化。笔者使用的是 Ansible + Git 实现。最终样子如下：</p>

<p><img src="./一些小团队的自动化运维实践经验_files/292372-5efa9abb7354b6b2.png" alt="prometheus"></p>

<p>这里需要简单介绍一下：</p>

<ol>
  <li>Prometheus Server 负责监控数据收集和存储</li>
  <li>Prometheus Alert manager 负责根据告警规则进行告警，可集成很多告警通道</li>
  <li><a href="https://github.com/prometheus/node_exporter">node-exporter</a> 的作用就是从机器读取指标，然后暴露一个 http 服务，Prometheus 就是从这个服务中收集监控指标。当然 Prometheus 官方还有各种各样的 exporter。</li>
</ol>

<p>使用 Ansible 作为部署工具的一个好处是太多现成的 role 了，安装Prometheus 时，我使用的是现成的：<a href="https://github.com/ernestas-poskus/ansible-prometheus">prometheus-ansble</a></p>

<p>有了监控数据后，我们就可以对数据进行可视化，Grafana 和 Prometheus 集成得非常好，所以，我们又部署了 Grafana:</p>

<p><img src="./一些小团队的自动化运维实践经验_files/292372-4c78ee26c4ad763f.png" alt="image.png"></p>

<p>在 Grafana 上查看 nodex-exporter 收集的数据的效果图大概如下：
<img src="./一些小团队的自动化运维实践经验_files/292372-e6027d31ba651dca.png" alt="image.png"></p>

<p>可是，我们不可能24小时盯着屏幕看CPU负载有没有超吧？这时候就要上告警了，Promehtues 默认集成了 N 多告警渠道。可惜没有集成钉钉。但也没有关系，有好心的同学开源了钉钉集成 Prometheus 告警的组件：<a href="https://github.com/timonwong/prometheus-webhook-dingtalk">prometheus-webhook-dingtalk</a>。接着，我们告警也上了：
<img src="./一些小团队的自动化运维实践经验_files/292372-b4ec4be4e922d064.png" alt="集成告警"></p>

<p>完成以上工作后，我们的基础监控的架子就完成了。为我们后期上 Redis 监控、JVM 监控等更上层的监控做好了准备。</p>

<h4 id="配置版本化要从娃娃抓起">配置版本化要从娃娃抓起</h4>
<p>在搭建监控系统的过程中，我们已经将配置抽离出来，放到一个单独的代码仓库进行管理。以后所有部署，我们都会将配置和部署逻辑分离。</p>

<p>关于如何使用 Ansible 进行配置管理，可以参考这篇文章：<a href="https://www.digitalocean.com/community/tutorials/how-to-manage-multistage-environments-with-ansible">How to Manage Multistage Environments with Ansible</a> 。我们就是使用这种方式来组织环境变量的。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── environments/         # Parent directory for our environment-specific directories
│   │
│   ├── dev/              # Contains all files specific to the dev environment
│   │   ├── group_vars/   # dev specific group_vars files
│   │   │   ├── all
│   │   │   ├── db
│   │   │   └── web
│   │   └── hosts         # Contains only the hosts in the dev environment
│   │
│   ├── prod/             # Contains all files specific to the prod environment
│   │   ├── group_vars/   # prod specific group_vars files
│   │   │   ├── all
│   │   │   ├── db
│   │   │   └── web
│   │   └── hosts         # Contains only the hosts in the prod environment
│   │
│   └── stage/            # Contains all files specific to the stage environment
│       ├── group_vars/   # stage specific group_vars files
│       │   ├── all
│       │   ├── db
│       │   └── web
│       └── hosts         # Contains only the hosts in the stage environment
│
</code></pre></div></div>
<p>现阶段，我们所有的配置都以文本的方式存储，将来要切换成使用Consul做配置中心，也非常的方便，因为 Ansible2.0以上的版本已经原生集成了consule: <a href="http://docs.ansible.com/ansible/latest/modules/consul_module.html">consul_module</a></p>

<p><strong>Tips:</strong> Ansible 的配置变量是有层次的，这为我们的配置管理提供了非常大的灵活性。</p>

<h4 id="jenkins-化将打包交给-jenkins">Jenkins 化：将打包交给 Jenkins</h4>
<p>我们要将所有的项目的打包工作交给 Jenkins。当然，现实中我们是先将一些项目放到 Jenkins 上打包，逐步将项目放上 Jenkins。</p>

<p>首先我们要有 Jenkins。搭建 Jenkins 同样有现成的 Ansible 脚本：<a href="https://github.com/geerlingguy/ansible-role-jenkins">ansible-role-jenkins</a>。注意了，在网上看到的大多文章告诉你 Jenkins 都是需要手工安装插件的，而我们使用的这个 ansible-role-jenkins 实现了自动安装插件，你只需要加一个配置变量 jenkins_plugins 就可以了，官方例子如下：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span> <span class="s">all</span>
  <span class="na">vars</span><span class="pi">:</span>
    <span class="na">jenkins_plugins</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">blueocean</span>
      <span class="pi">-</span> <span class="s">ghprb</span>
      <span class="pi">-</span> <span class="s">greenballs</span>
      <span class="pi">-</span> <span class="s">workflow-aggregator</span>
    <span class="na">jenkins_plugin_timeout</span><span class="pi">:</span> <span class="s">120</span>

  <span class="na">pre_tasks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">include_tasks</span><span class="pi">:</span> <span class="s">java-8.yml</span>

  <span class="na">roles</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">geerlingguy.java</span>
    <span class="pi">-</span> <span class="s">ansible-role-jenkins</span>
</code></pre></div></div>

<p>搭建好 Jenkins 后，就要集成 Gitlab 了。我们原来就有Gitlab了，所以，不需要重新搭建。如何集成就不细表了，网络上已经很多文章。</p>

<p>最终 Jenkins 搭建成以下这个样子：
<img src="./一些小团队的自动化运维实践经验_files/292372-4e2f1ecd9d463d75.png" alt="jenkins">
关于 Jenkins master 与 Jenkins agent 的连接方式，由于网络环境各不相同，网上也有很多种方式，大家自行选择适合的方式。</p>

<p>好，现在我们需要告诉 Jenkins 如何对我们的业务代码进行编译打包。有两种方法：</p>

<ol>
  <li>界面上设置</li>
  <li>使用 Jenkinsfile：类似于 Dockerfile 的一种文本文件，具体介绍：<a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/">Using a Jenkinsfile</a></li>
</ol>

<p>作者毫不犹豫地选择了第2种，因为一是利于版本化；二是灵活。</p>

<p>Jenkinsfile 类似这样：</p>
<div class="language-groovy highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pipeline</span> <span class="o">{</span>
    <span class="n">agent</span> <span class="n">any</span>
    <span class="n">stages</span> <span class="o">{</span>
        <span class="n">stage</span><span class="o">(</span><span class="s1">'Build'</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">{</span>
                <span class="n">sh</span> <span class="s1">'./gradlew clean build'</span>
                <span class="n">archiveArtifacts</span> <span class="nl">artifacts:</span> <span class="s1">'**/target/*.jar'</span><span class="o">,</span> <span class="nl">fingerprint:</span> <span class="kc">true</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>那么 Jenkinsfile 放哪里呢？和业务代码放在一起，类似这样每个工程各自管理自己的 Jenkinsfile:</p>

<p><img src="./一些小团队的自动化运维实践经验_files/292372-7bbdbb9c303f97be.png" alt="jenkinsfile"></p>

<p>这时，我们就可以在 Jenkins 上创建一个 pipleline Job了：</p>

<p>关于分支管理，我们人少，所以，建议所有项目统一在 master 分支进行开发并发布。</p>

<h4 id="让-jenkins-帮助我们执行-ansible">让 Jenkins 帮助我们执行 Ansible</h4>
<p>之前我们都是在程序员的电脑执行 Ansible 的，现在我们要把这项工作交给 Jenkins。具体操作：</p>
<ol>
  <li>在 Jenkins 安装 <a href="https://wiki.jenkins.io/display/JENKINS/Ansible+Plugin">Ansible 插件</a></li>
  <li>在 Jenkinsfile 中执行
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>withCredentials([sshUserPrivateKey(keyFileVariable:"deploy_private",credentialsId:"deploy"),file(credentialsId: 'vault_password', variable: 'vault_password')]) {
             ansiblePlaybook vaultCredentialsId: 'vault_password', inventory: "environments/prod", playbook: "playbook.yaml",
             extraVars:[
               ansible_ssh_private_key_file: [value: "${deploy_private}", hidden: true],
               build_number: [value: "${params.build_number}", hidden: false]
             ]
}
</code></pre></div>    </div>
    <p>这里需要解释下：</p>
  </li>
  <li><code class="highlighter-rouge">ansiblePlaybook</code> 是 Jenkins ansible 插件提供的 pipeline 语法，类似手工执行：<code class="highlighter-rouge">ansible-playbook</code> 。</li>
  <li><code class="highlighter-rouge">withCredentials</code> 是 <a href="https://jenkins.io/doc/pipeline/steps/credentials-binding/">Credentials Binding</a> 插件的语法，用于引用一些敏感信息，比如执行 Ansible 时需要的 ssh key 及 Ansible Vault 密码。</li>
  <li>一些敏感配置变量，我们使用 <a href="http://docs.ansible.com/ansible/2.5/user_guide/vault.html">Ansible Vault</a> 技术加密。</li>
</ol>

<h4 id="ansible-脚本应该放哪">Ansible 脚本应该放哪？</h4>
<p>我们已经知道各个项目各自负责自己的自动化构建，所以，Jenkinfile 就放到各自项目中。那项目的部署呢？同样的道理，我们觉得也应该由各个项目自行负责，所以，我们的每个要进行部署的项目下都会有一个 <code class="highlighter-rouge">ansible</code> 目录，用于存放 Ansible 脚本。类似这样：
<img src="./一些小团队的自动化运维实践经验_files/292372-af44916db14549cb.png" alt="ansible"></p>

<p>但是，怎么用呢？我们会在打包阶段将 Ansible 目录进行 zip 打包。真正部署时，再解压执行里面的 playbook。</p>

<h4 id="快速为所有的项目生成-ansible-脚本及jenkinsfile">快速为所有的项目生成 Ansible 脚本及Jenkinsfile</h4>
<p>上面，我们将一个项目进行 Jenkins 化和 Ansible 化，但是我们还有很多项目需要进行同样的动作。考虑到这是体力活，而且以后我们还会经常做这样事，所以笔者决定使用 <a href="https://github.com/audreyr/cookiecutter">cookiecutter</a> 技术自动生成 Jenkinsfile 及 Ansible 脚本，创建一个项目，像这样：
<img src="./一些小团队的自动化运维实践经验_files/292372-11bcf8bc60c7bd9b.png" alt="cookiecutter"></p>

<h4 id="小结">小结</h4>

<p>总结下来，我们小团队的自动化运维实施的顺序大概为：</p>

<ol>
  <li>上基础监控</li>
  <li>上 Gitlab</li>
  <li>上 Jenkins，并集成 Gitlab</li>
  <li>使用 Jenkins 实现自动编译打包</li>
  <li>使用 Jenkins 执行 Ansible</li>
</ol>

<p>以上只是一个架子，基于这个“架子”，就可以向那些大厂的高大上的架构进行演进了。比如：</p>

<ul>
  <li>CMDB的建设：我们使用 <a href="https://github.com/fboender/ansible-cmdb">ansible-cmdb</a> 根据 inventory 自动生成当前所有机器的情况</li>
  <li>发布管理：Jenkins 上可以对发布的每个阶段进行定制。蓝绿发布等发布方式可以使用通过修改 Ansible 脚本和 Inventory 实现。</li>
  <li>自动扩缩容：通过配置 Prometheus 告警规则，调用相应 webhook 就可以实现</li>
  <li>ChatOps: <a href="https://showme.codes/2017-10-08/chatops-in-action/">ChatOps实战</a></li>
</ul>

<p>以上就是笔者关于自动化运维的一些实践。还在演进路上。希望能与大家交流。</p>



  
  <script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables */
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = '//showme-codes.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>
<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
  

  <p>
  <b>End</b>
  <!--
  <div class="post-share">
    <hr>
    <div class="jiathis_style">
	<span class="jiathis_txt">分享到：</span>
	<a class="jiathis_button_weixin">微信</a>
	<a class="jiathis_button_tsina">新浪微博</a>
	<a class="jiathis_button_xiaoyou">朋友网</a>
	<a class="jiathis_button_copy">复制网址</a>
	<a href="https://showme.codes/2018-06-07/devops-in-action/" class="jiathis jiathis_txt jiathis_separator jtico jtico_jiathis" target="_blank">更多</a>
	<a class="jiathis_counter_style"></a>
</div>
<script type="text/javascript" src="http://v3.jiathis.com/code_mini/jia.js?uid=" charset="utf-8"></script>
<br/>
  </div>
   -->
  
    </p><hr>
  <b>为你的收获买单</b>
  <img src="./一些小团队的自动化运维实践经验_files/WechatIMG1.jpeg" width="240px" height="340px">
   
</div>


    <!-- Documents about icons are here: http://fontawesome.io/icons/ -->
<div class="footer">
	<hr>
	<div class="footer-link">
		

		

		
		<a href="https://github.com/zacker330"><i class="fa fa-github" aria-hidden="true"></i></a>
		

		

		

		

		
		<a href="mailto:apl330@gmail.com"><i class="fa fa-envelope" aria-hidden="true"></i></a>
		

	</div>
	© 2016 翟志军. All rights reserved.
</div>

  </div>

  <script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?69b03f87a555c46d928714ad0ac9b925";
  var s = document.getElementsByTagName("script")[0];
  s.parentNode.insertBefore(hm, s);
})();
</script>



<iframe style="display: none;" src="./一些小团队的自动化运维实践经验_files/saved_resource.html"></iframe><div id="cye-workaround-body" style="position: absolute; left: 0px; top: 0px; z-index: -2147483646; background: none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255); height: 10622px; width: 1341px;"></div><div id="cye-workaround-body-image" style="position: absolute; left: 0px; top: 0px; z-index: -2147483645; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0); height: 10622px; width: 1341px;"></div><iframe style="display: none;" src="./一些小团队的自动化运维实践经验_files/saved_resource(1).html"></iframe></body><div id="cye-workaround-body" style="position: absolute; left: 0px; top: 0px; z-index: -2147483646; background: none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255); height: 10622px; width: 1479px;"></div><div id="cye-workaround-body-image" style="position: absolute; left: 0px; top: 0px; z-index: -2147483645; background: none 0% 0% / auto repeat scroll padding-box border-box rgba(0, 0, 0, 0); height: 10622px; width: 1479px;"></div></html>